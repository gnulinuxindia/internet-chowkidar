// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitescategories"
)

// CategoriesQuery is the builder for querying Categories entities.
type CategoriesQuery struct {
	config
	ctx                 *QueryContext
	order               []categories.OrderOption
	inters              []Interceptor
	predicates          []predicate.Categories
	withSites           *SitesQuery
	withSitesCategories *SitesCategoriesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CategoriesQuery builder.
func (_q *CategoriesQuery) Where(ps ...predicate.Categories) *CategoriesQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *CategoriesQuery) Limit(limit int) *CategoriesQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *CategoriesQuery) Offset(offset int) *CategoriesQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *CategoriesQuery) Unique(unique bool) *CategoriesQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *CategoriesQuery) Order(o ...categories.OrderOption) *CategoriesQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QuerySites chains the current query on the "sites" edge.
func (_q *CategoriesQuery) QuerySites() *SitesQuery {
	query := (&SitesClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(categories.Table, categories.FieldID, selector),
			sqlgraph.To(sites.Table, sites.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, categories.SitesTable, categories.SitesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySitesCategories chains the current query on the "sites_categories" edge.
func (_q *CategoriesQuery) QuerySitesCategories() *SitesCategoriesQuery {
	query := (&SitesCategoriesClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(categories.Table, categories.FieldID, selector),
			sqlgraph.To(sitescategories.Table, sitescategories.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, categories.SitesCategoriesTable, categories.SitesCategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Categories entity from the query.
// Returns a *NotFoundError when no Categories was found.
func (_q *CategoriesQuery) First(ctx context.Context) (*Categories, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{categories.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *CategoriesQuery) FirstX(ctx context.Context) *Categories {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Categories ID from the query.
// Returns a *NotFoundError when no Categories ID was found.
func (_q *CategoriesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{categories.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *CategoriesQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Categories entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Categories entity is found.
// Returns a *NotFoundError when no Categories entities are found.
func (_q *CategoriesQuery) Only(ctx context.Context) (*Categories, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{categories.Label}
	default:
		return nil, &NotSingularError{categories.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *CategoriesQuery) OnlyX(ctx context.Context) *Categories {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Categories ID in the query.
// Returns a *NotSingularError when more than one Categories ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *CategoriesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{categories.Label}
	default:
		err = &NotSingularError{categories.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *CategoriesQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CategoriesSlice.
func (_q *CategoriesQuery) All(ctx context.Context) ([]*Categories, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Categories, *CategoriesQuery]()
	return withInterceptors[[]*Categories](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *CategoriesQuery) AllX(ctx context.Context) []*Categories {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Categories IDs.
func (_q *CategoriesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(categories.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *CategoriesQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *CategoriesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*CategoriesQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *CategoriesQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *CategoriesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *CategoriesQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CategoriesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *CategoriesQuery) Clone() *CategoriesQuery {
	if _q == nil {
		return nil
	}
	return &CategoriesQuery{
		config:              _q.config,
		ctx:                 _q.ctx.Clone(),
		order:               append([]categories.OrderOption{}, _q.order...),
		inters:              append([]Interceptor{}, _q.inters...),
		predicates:          append([]predicate.Categories{}, _q.predicates...),
		withSites:           _q.withSites.Clone(),
		withSitesCategories: _q.withSitesCategories.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithSites tells the query-builder to eager-load the nodes that are connected to
// the "sites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *CategoriesQuery) WithSites(opts ...func(*SitesQuery)) *CategoriesQuery {
	query := (&SitesClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSites = query
	return _q
}

// WithSitesCategories tells the query-builder to eager-load the nodes that are connected to
// the "sites_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *CategoriesQuery) WithSitesCategories(opts ...func(*SitesCategoriesQuery)) *CategoriesQuery {
	query := (&SitesCategoriesClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSitesCategories = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Categories.Query().
//		GroupBy(categories.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *CategoriesQuery) GroupBy(field string, fields ...string) *CategoriesGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CategoriesGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = categories.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Categories.Query().
//		Select(categories.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *CategoriesQuery) Select(fields ...string) *CategoriesSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &CategoriesSelect{CategoriesQuery: _q}
	sbuild.label = categories.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CategoriesSelect configured with the given aggregations.
func (_q *CategoriesQuery) Aggregate(fns ...AggregateFunc) *CategoriesSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *CategoriesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !categories.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *CategoriesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Categories, error) {
	var (
		nodes       = []*Categories{}
		_spec       = _q.querySpec()
		loadedTypes = [2]bool{
			_q.withSites != nil,
			_q.withSitesCategories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Categories).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Categories{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withSites; query != nil {
		if err := _q.loadSites(ctx, query, nodes,
			func(n *Categories) { n.Edges.Sites = []*Sites{} },
			func(n *Categories, e *Sites) { n.Edges.Sites = append(n.Edges.Sites, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSitesCategories; query != nil {
		if err := _q.loadSitesCategories(ctx, query, nodes,
			func(n *Categories) { n.Edges.SitesCategories = []*SitesCategories{} },
			func(n *Categories, e *SitesCategories) { n.Edges.SitesCategories = append(n.Edges.SitesCategories, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *CategoriesQuery) loadSites(ctx context.Context, query *SitesQuery, nodes []*Categories, init func(*Categories), assign func(*Categories, *Sites)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Categories)
	nids := make(map[int]map[*Categories]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(categories.SitesTable)
		s.Join(joinT).On(s.C(sites.FieldID), joinT.C(categories.SitesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(categories.SitesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(categories.SitesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Categories]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Sites](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "sites" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *CategoriesQuery) loadSitesCategories(ctx context.Context, query *SitesCategoriesQuery, nodes []*Categories, init func(*Categories), assign func(*Categories, *SitesCategories)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Categories)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sitescategories.FieldCategoriesID)
	}
	query.Where(predicate.SitesCategories(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(categories.SitesCategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CategoriesID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "categories_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *CategoriesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *CategoriesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(categories.Table, categories.Columns, sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categories.FieldID)
		for i := range fields {
			if fields[i] != categories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *CategoriesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(categories.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = categories.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CategoriesGroupBy is the group-by builder for Categories entities.
type CategoriesGroupBy struct {
	selector
	build *CategoriesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *CategoriesGroupBy) Aggregate(fns ...AggregateFunc) *CategoriesGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *CategoriesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoriesQuery, *CategoriesGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *CategoriesGroupBy) sqlScan(ctx context.Context, root *CategoriesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CategoriesSelect is the builder for selecting fields of Categories entities.
type CategoriesSelect struct {
	*CategoriesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *CategoriesSelect) Aggregate(fns ...AggregateFunc) *CategoriesSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *CategoriesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoriesQuery, *CategoriesSelect](ctx, _s.CategoriesQuery, _s, _s.inters, v)
}

func (_s *CategoriesSelect) sqlScan(ctx context.Context, root *CategoriesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
