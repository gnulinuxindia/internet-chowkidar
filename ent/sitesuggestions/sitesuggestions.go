// Code generated by ent, DO NOT EDIT.

package sitesuggestions

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sitesuggestions type in the database.
	Label = "site_suggestions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldPingURL holds the string denoting the ping_url field in the database.
	FieldPingURL = "ping_url"
	// FieldCategories holds the string denoting the categories field in the database.
	FieldCategories = "categories"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResolveReason holds the string denoting the resolve_reason field in the database.
	FieldResolveReason = "resolve_reason"
	// FieldLinkedSite holds the string denoting the linked_site field in the database.
	FieldLinkedSite = "linked_site"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// Table holds the table name of the sitesuggestions in the database.
	Table = "site_suggestions"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "site_suggestions"
	// SiteInverseTable is the table name for the Sites entity.
	// It exists in this package in order to avoid circular dependency with the "sites" package.
	SiteInverseTable = "sites"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "linked_site"
)

// Columns holds all SQL columns for sitesuggestions fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDomain,
	FieldPingURL,
	FieldCategories,
	FieldReason,
	FieldStatus,
	FieldResolveReason,
	FieldLinkedSite,
	FieldResolvedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusAccepted Status = "accepted"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAccepted, StatusRejected:
		return nil
	default:
		return fmt.Errorf("sitesuggestions: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SiteSuggestions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByPingURL orders the results by the ping_url field.
func ByPingURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPingURL, opts...).ToFunc()
}

// ByCategories orders the results by the categories field.
func ByCategories(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategories, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResolveReason orders the results by the resolve_reason field.
func ByResolveReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolveReason, opts...).ToFunc()
}

// ByLinkedSite orders the results by the linked_site field.
func ByLinkedSite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkedSite, opts...).ToFunc()
}

// ByResolvedAt orders the results by the resolved_at field.
func ByResolvedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedAt, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
	)
}
