// Code generated by ent, DO NOT EDIT.

package sitesuggestions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldUpdatedAt, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldDomain, v))
}

// PingURL applies equality check predicate on the "ping_url" field. It's identical to PingURLEQ.
func PingURL(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldPingURL, v))
}

// Categories applies equality check predicate on the "categories" field. It's identical to CategoriesEQ.
func Categories(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldCategories, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldReason, v))
}

// ResolveReason applies equality check predicate on the "resolve_reason" field. It's identical to ResolveReasonEQ.
func ResolveReason(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldResolveReason, v))
}

// LinkedSite applies equality check predicate on the "linked_site" field. It's identical to LinkedSiteEQ.
func LinkedSite(v int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldLinkedSite, v))
}

// ResolvedAt applies equality check predicate on the "resolved_at" field. It's identical to ResolvedAtEQ.
func ResolvedAt(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldResolvedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldUpdatedAt, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContainsFold(FieldDomain, v))
}

// PingURLEQ applies the EQ predicate on the "ping_url" field.
func PingURLEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldPingURL, v))
}

// PingURLNEQ applies the NEQ predicate on the "ping_url" field.
func PingURLNEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldPingURL, v))
}

// PingURLIn applies the In predicate on the "ping_url" field.
func PingURLIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldPingURL, vs...))
}

// PingURLNotIn applies the NotIn predicate on the "ping_url" field.
func PingURLNotIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldPingURL, vs...))
}

// PingURLGT applies the GT predicate on the "ping_url" field.
func PingURLGT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldPingURL, v))
}

// PingURLGTE applies the GTE predicate on the "ping_url" field.
func PingURLGTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldPingURL, v))
}

// PingURLLT applies the LT predicate on the "ping_url" field.
func PingURLLT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldPingURL, v))
}

// PingURLLTE applies the LTE predicate on the "ping_url" field.
func PingURLLTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldPingURL, v))
}

// PingURLContains applies the Contains predicate on the "ping_url" field.
func PingURLContains(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContains(FieldPingURL, v))
}

// PingURLHasPrefix applies the HasPrefix predicate on the "ping_url" field.
func PingURLHasPrefix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasPrefix(FieldPingURL, v))
}

// PingURLHasSuffix applies the HasSuffix predicate on the "ping_url" field.
func PingURLHasSuffix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasSuffix(FieldPingURL, v))
}

// PingURLEqualFold applies the EqualFold predicate on the "ping_url" field.
func PingURLEqualFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEqualFold(FieldPingURL, v))
}

// PingURLContainsFold applies the ContainsFold predicate on the "ping_url" field.
func PingURLContainsFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContainsFold(FieldPingURL, v))
}

// CategoriesEQ applies the EQ predicate on the "categories" field.
func CategoriesEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldCategories, v))
}

// CategoriesNEQ applies the NEQ predicate on the "categories" field.
func CategoriesNEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldCategories, v))
}

// CategoriesIn applies the In predicate on the "categories" field.
func CategoriesIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldCategories, vs...))
}

// CategoriesNotIn applies the NotIn predicate on the "categories" field.
func CategoriesNotIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldCategories, vs...))
}

// CategoriesGT applies the GT predicate on the "categories" field.
func CategoriesGT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldCategories, v))
}

// CategoriesGTE applies the GTE predicate on the "categories" field.
func CategoriesGTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldCategories, v))
}

// CategoriesLT applies the LT predicate on the "categories" field.
func CategoriesLT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldCategories, v))
}

// CategoriesLTE applies the LTE predicate on the "categories" field.
func CategoriesLTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldCategories, v))
}

// CategoriesContains applies the Contains predicate on the "categories" field.
func CategoriesContains(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContains(FieldCategories, v))
}

// CategoriesHasPrefix applies the HasPrefix predicate on the "categories" field.
func CategoriesHasPrefix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasPrefix(FieldCategories, v))
}

// CategoriesHasSuffix applies the HasSuffix predicate on the "categories" field.
func CategoriesHasSuffix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasSuffix(FieldCategories, v))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotNull(FieldCategories))
}

// CategoriesEqualFold applies the EqualFold predicate on the "categories" field.
func CategoriesEqualFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEqualFold(FieldCategories, v))
}

// CategoriesContainsFold applies the ContainsFold predicate on the "categories" field.
func CategoriesContainsFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContainsFold(FieldCategories, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContainsFold(FieldReason, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldStatus, vs...))
}

// ResolveReasonEQ applies the EQ predicate on the "resolve_reason" field.
func ResolveReasonEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldResolveReason, v))
}

// ResolveReasonNEQ applies the NEQ predicate on the "resolve_reason" field.
func ResolveReasonNEQ(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldResolveReason, v))
}

// ResolveReasonIn applies the In predicate on the "resolve_reason" field.
func ResolveReasonIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldResolveReason, vs...))
}

// ResolveReasonNotIn applies the NotIn predicate on the "resolve_reason" field.
func ResolveReasonNotIn(vs ...string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldResolveReason, vs...))
}

// ResolveReasonGT applies the GT predicate on the "resolve_reason" field.
func ResolveReasonGT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldResolveReason, v))
}

// ResolveReasonGTE applies the GTE predicate on the "resolve_reason" field.
func ResolveReasonGTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldResolveReason, v))
}

// ResolveReasonLT applies the LT predicate on the "resolve_reason" field.
func ResolveReasonLT(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldResolveReason, v))
}

// ResolveReasonLTE applies the LTE predicate on the "resolve_reason" field.
func ResolveReasonLTE(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldResolveReason, v))
}

// ResolveReasonContains applies the Contains predicate on the "resolve_reason" field.
func ResolveReasonContains(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContains(FieldResolveReason, v))
}

// ResolveReasonHasPrefix applies the HasPrefix predicate on the "resolve_reason" field.
func ResolveReasonHasPrefix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasPrefix(FieldResolveReason, v))
}

// ResolveReasonHasSuffix applies the HasSuffix predicate on the "resolve_reason" field.
func ResolveReasonHasSuffix(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldHasSuffix(FieldResolveReason, v))
}

// ResolveReasonIsNil applies the IsNil predicate on the "resolve_reason" field.
func ResolveReasonIsNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIsNull(FieldResolveReason))
}

// ResolveReasonNotNil applies the NotNil predicate on the "resolve_reason" field.
func ResolveReasonNotNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotNull(FieldResolveReason))
}

// ResolveReasonEqualFold applies the EqualFold predicate on the "resolve_reason" field.
func ResolveReasonEqualFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEqualFold(FieldResolveReason, v))
}

// ResolveReasonContainsFold applies the ContainsFold predicate on the "resolve_reason" field.
func ResolveReasonContainsFold(v string) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldContainsFold(FieldResolveReason, v))
}

// LinkedSiteEQ applies the EQ predicate on the "linked_site" field.
func LinkedSiteEQ(v int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldLinkedSite, v))
}

// LinkedSiteNEQ applies the NEQ predicate on the "linked_site" field.
func LinkedSiteNEQ(v int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldLinkedSite, v))
}

// LinkedSiteIn applies the In predicate on the "linked_site" field.
func LinkedSiteIn(vs ...int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldLinkedSite, vs...))
}

// LinkedSiteNotIn applies the NotIn predicate on the "linked_site" field.
func LinkedSiteNotIn(vs ...int) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldLinkedSite, vs...))
}

// LinkedSiteIsNil applies the IsNil predicate on the "linked_site" field.
func LinkedSiteIsNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIsNull(FieldLinkedSite))
}

// LinkedSiteNotNil applies the NotNil predicate on the "linked_site" field.
func LinkedSiteNotNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotNull(FieldLinkedSite))
}

// ResolvedAtEQ applies the EQ predicate on the "resolved_at" field.
func ResolvedAtEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldEQ(FieldResolvedAt, v))
}

// ResolvedAtNEQ applies the NEQ predicate on the "resolved_at" field.
func ResolvedAtNEQ(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNEQ(FieldResolvedAt, v))
}

// ResolvedAtIn applies the In predicate on the "resolved_at" field.
func ResolvedAtIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIn(FieldResolvedAt, vs...))
}

// ResolvedAtNotIn applies the NotIn predicate on the "resolved_at" field.
func ResolvedAtNotIn(vs ...time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotIn(FieldResolvedAt, vs...))
}

// ResolvedAtGT applies the GT predicate on the "resolved_at" field.
func ResolvedAtGT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGT(FieldResolvedAt, v))
}

// ResolvedAtGTE applies the GTE predicate on the "resolved_at" field.
func ResolvedAtGTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldGTE(FieldResolvedAt, v))
}

// ResolvedAtLT applies the LT predicate on the "resolved_at" field.
func ResolvedAtLT(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLT(FieldResolvedAt, v))
}

// ResolvedAtLTE applies the LTE predicate on the "resolved_at" field.
func ResolvedAtLTE(v time.Time) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldLTE(FieldResolvedAt, v))
}

// ResolvedAtIsNil applies the IsNil predicate on the "resolved_at" field.
func ResolvedAtIsNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldIsNull(FieldResolvedAt))
}

// ResolvedAtNotNil applies the NotNil predicate on the "resolved_at" field.
func ResolvedAtNotNil() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.FieldNotNull(FieldResolvedAt))
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.SiteSuggestions {
	return predicate.SiteSuggestions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.Sites) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(func(s *sql.Selector) {
		step := newSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SiteSuggestions) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SiteSuggestions) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SiteSuggestions) predicate.SiteSuggestions {
	return predicate.SiteSuggestions(sql.NotPredicates(p))
}
