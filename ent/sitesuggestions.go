// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitesuggestions"
)

// SiteSuggestions is the model entity for the SiteSuggestions schema.
type SiteSuggestions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// PingURL holds the value of the "ping_url" field.
	PingURL string `json:"ping_url,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories string `json:"categories,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Status holds the value of the "status" field.
	Status sitesuggestions.Status `json:"status,omitempty"`
	// ResolveReason holds the value of the "resolve_reason" field.
	ResolveReason string `json:"resolve_reason,omitempty"`
	// LinkedSite holds the value of the "linked_site" field.
	LinkedSite int `json:"linked_site,omitempty"`
	// ResolvedAt holds the value of the "resolved_at" field.
	ResolvedAt time.Time `json:"resolved_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteSuggestionsQuery when eager-loading is set.
	Edges        SiteSuggestionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SiteSuggestionsEdges holds the relations/edges for other nodes in the graph.
type SiteSuggestionsEdges struct {
	// Site holds the value of the site edge.
	Site *Sites `json:"site,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteSuggestionsEdges) SiteOrErr() (*Sites, error) {
	if e.Site != nil {
		return e.Site, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sites.Label}
	}
	return nil, &NotLoadedError{edge: "site"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SiteSuggestions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sitesuggestions.FieldID, sitesuggestions.FieldLinkedSite:
			values[i] = new(sql.NullInt64)
		case sitesuggestions.FieldDomain, sitesuggestions.FieldPingURL, sitesuggestions.FieldCategories, sitesuggestions.FieldReason, sitesuggestions.FieldStatus, sitesuggestions.FieldResolveReason:
			values[i] = new(sql.NullString)
		case sitesuggestions.FieldCreatedAt, sitesuggestions.FieldUpdatedAt, sitesuggestions.FieldResolvedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SiteSuggestions fields.
func (_m *SiteSuggestions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sitesuggestions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case sitesuggestions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case sitesuggestions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case sitesuggestions.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				_m.Domain = value.String
			}
		case sitesuggestions.FieldPingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ping_url", values[i])
			} else if value.Valid {
				_m.PingURL = value.String
			}
		case sitesuggestions.FieldCategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value.Valid {
				_m.Categories = value.String
			}
		case sitesuggestions.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = value.String
			}
		case sitesuggestions.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = sitesuggestions.Status(value.String)
			}
		case sitesuggestions.FieldResolveReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolve_reason", values[i])
			} else if value.Valid {
				_m.ResolveReason = value.String
			}
		case sitesuggestions.FieldLinkedSite:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field linked_site", values[i])
			} else if value.Valid {
				_m.LinkedSite = int(value.Int64)
			}
		case sitesuggestions.FieldResolvedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_at", values[i])
			} else if value.Valid {
				_m.ResolvedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SiteSuggestions.
// This includes values selected through modifiers, order, etc.
func (_m *SiteSuggestions) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the SiteSuggestions entity.
func (_m *SiteSuggestions) QuerySite() *SitesQuery {
	return NewSiteSuggestionsClient(_m.config).QuerySite(_m)
}

// Update returns a builder for updating this SiteSuggestions.
// Note that you need to call SiteSuggestions.Unwrap() before calling this method if this SiteSuggestions
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SiteSuggestions) Update() *SiteSuggestionsUpdateOne {
	return NewSiteSuggestionsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SiteSuggestions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SiteSuggestions) Unwrap() *SiteSuggestions {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SiteSuggestions is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SiteSuggestions) String() string {
	var builder strings.Builder
	builder.WriteString("SiteSuggestions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(_m.Domain)
	builder.WriteString(", ")
	builder.WriteString("ping_url=")
	builder.WriteString(_m.PingURL)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(_m.Categories)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(_m.Reason)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("resolve_reason=")
	builder.WriteString(_m.ResolveReason)
	builder.WriteString(", ")
	builder.WriteString("linked_site=")
	builder.WriteString(fmt.Sprintf("%v", _m.LinkedSite))
	builder.WriteString(", ")
	builder.WriteString("resolved_at=")
	builder.WriteString(_m.ResolvedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SiteSuggestionsSlice is a parsable slice of SiteSuggestions.
type SiteSuggestionsSlice []*SiteSuggestions
