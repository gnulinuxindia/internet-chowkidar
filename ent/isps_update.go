// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/blocks"
	"github.com/gnulinuxindia/internet-chowkidar/ent/isps"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
)

// IspsUpdate is the builder for updating Isps entities.
type IspsUpdate struct {
	config
	hooks    []Hook
	mutation *IspsMutation
}

// Where appends a list predicates to the IspsUpdate builder.
func (_u *IspsUpdate) Where(ps ...predicate.Isps) *IspsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *IspsUpdate) SetUpdatedAt(v time.Time) *IspsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *IspsUpdate) SetLatitude(v float64) *IspsUpdate {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *IspsUpdate) SetNillableLatitude(v *float64) *IspsUpdate {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *IspsUpdate) AddLatitude(v float64) *IspsUpdate {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *IspsUpdate) SetLongitude(v float64) *IspsUpdate {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *IspsUpdate) SetNillableLongitude(v *float64) *IspsUpdate {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *IspsUpdate) AddLongitude(v float64) *IspsUpdate {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetName sets the "name" field.
func (_u *IspsUpdate) SetName(v string) *IspsUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *IspsUpdate) SetNillableName(v *string) *IspsUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddIspBlockIDs adds the "isp_blocks" edge to the Blocks entity by IDs.
func (_u *IspsUpdate) AddIspBlockIDs(ids ...int) *IspsUpdate {
	_u.mutation.AddIspBlockIDs(ids...)
	return _u
}

// AddIspBlocks adds the "isp_blocks" edges to the Blocks entity.
func (_u *IspsUpdate) AddIspBlocks(v ...*Blocks) *IspsUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIspBlockIDs(ids...)
}

// Mutation returns the IspsMutation object of the builder.
func (_u *IspsUpdate) Mutation() *IspsMutation {
	return _u.mutation
}

// ClearIspBlocks clears all "isp_blocks" edges to the Blocks entity.
func (_u *IspsUpdate) ClearIspBlocks() *IspsUpdate {
	_u.mutation.ClearIspBlocks()
	return _u
}

// RemoveIspBlockIDs removes the "isp_blocks" edge to Blocks entities by IDs.
func (_u *IspsUpdate) RemoveIspBlockIDs(ids ...int) *IspsUpdate {
	_u.mutation.RemoveIspBlockIDs(ids...)
	return _u
}

// RemoveIspBlocks removes "isp_blocks" edges to Blocks entities.
func (_u *IspsUpdate) RemoveIspBlocks(v ...*Blocks) *IspsUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIspBlockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *IspsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *IspsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *IspsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *IspsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *IspsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := isps.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *IspsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(isps.Table, isps.Columns, sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(isps.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(isps.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(isps.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(isps.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(isps.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(isps.FieldName, field.TypeString, value)
	}
	if _u.mutation.IspBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIspBlocksIDs(); len(nodes) > 0 && !_u.mutation.IspBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IspBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// IspsUpdateOne is the builder for updating a single Isps entity.
type IspsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IspsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *IspsUpdateOne) SetUpdatedAt(v time.Time) *IspsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *IspsUpdateOne) SetLatitude(v float64) *IspsUpdateOne {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *IspsUpdateOne) SetNillableLatitude(v *float64) *IspsUpdateOne {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *IspsUpdateOne) AddLatitude(v float64) *IspsUpdateOne {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *IspsUpdateOne) SetLongitude(v float64) *IspsUpdateOne {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *IspsUpdateOne) SetNillableLongitude(v *float64) *IspsUpdateOne {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *IspsUpdateOne) AddLongitude(v float64) *IspsUpdateOne {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetName sets the "name" field.
func (_u *IspsUpdateOne) SetName(v string) *IspsUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *IspsUpdateOne) SetNillableName(v *string) *IspsUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddIspBlockIDs adds the "isp_blocks" edge to the Blocks entity by IDs.
func (_u *IspsUpdateOne) AddIspBlockIDs(ids ...int) *IspsUpdateOne {
	_u.mutation.AddIspBlockIDs(ids...)
	return _u
}

// AddIspBlocks adds the "isp_blocks" edges to the Blocks entity.
func (_u *IspsUpdateOne) AddIspBlocks(v ...*Blocks) *IspsUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIspBlockIDs(ids...)
}

// Mutation returns the IspsMutation object of the builder.
func (_u *IspsUpdateOne) Mutation() *IspsMutation {
	return _u.mutation
}

// ClearIspBlocks clears all "isp_blocks" edges to the Blocks entity.
func (_u *IspsUpdateOne) ClearIspBlocks() *IspsUpdateOne {
	_u.mutation.ClearIspBlocks()
	return _u
}

// RemoveIspBlockIDs removes the "isp_blocks" edge to Blocks entities by IDs.
func (_u *IspsUpdateOne) RemoveIspBlockIDs(ids ...int) *IspsUpdateOne {
	_u.mutation.RemoveIspBlockIDs(ids...)
	return _u
}

// RemoveIspBlocks removes "isp_blocks" edges to Blocks entities.
func (_u *IspsUpdateOne) RemoveIspBlocks(v ...*Blocks) *IspsUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIspBlockIDs(ids...)
}

// Where appends a list predicates to the IspsUpdate builder.
func (_u *IspsUpdateOne) Where(ps ...predicate.Isps) *IspsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *IspsUpdateOne) Select(field string, fields ...string) *IspsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Isps entity.
func (_u *IspsUpdateOne) Save(ctx context.Context) (*Isps, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *IspsUpdateOne) SaveX(ctx context.Context) *Isps {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *IspsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *IspsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *IspsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := isps.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *IspsUpdateOne) sqlSave(ctx context.Context) (_node *Isps, err error) {
	_spec := sqlgraph.NewUpdateSpec(isps.Table, isps.Columns, sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Isps.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isps.FieldID)
		for _, f := range fields {
			if !isps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != isps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(isps.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(isps.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(isps.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(isps.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(isps.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(isps.FieldName, field.TypeString, value)
	}
	if _u.mutation.IspBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIspBlocksIDs(); len(nodes) > 0 && !_u.mutation.IspBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IspBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   isps.IspBlocksTable,
			Columns: []string{isps.IspBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Isps{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
