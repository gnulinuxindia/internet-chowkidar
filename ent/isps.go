// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnulinuxindia/internet-chowkidar/ent/isps"
)

// Isps is the model entity for the Isps schema.
type Isps struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IspsQuery when eager-loading is set.
	Edges        IspsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IspsEdges holds the relations/edges for other nodes in the graph.
type IspsEdges struct {
	// IspBlocks holds the value of the isp_blocks edge.
	IspBlocks []*Blocks `json:"isp_blocks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IspBlocksOrErr returns the IspBlocks value or an error if the edge
// was not loaded in eager-loading.
func (e IspsEdges) IspBlocksOrErr() ([]*Blocks, error) {
	if e.loadedTypes[0] {
		return e.IspBlocks, nil
	}
	return nil, &NotLoadedError{edge: "isp_blocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Isps) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case isps.FieldLatitude, isps.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case isps.FieldID:
			values[i] = new(sql.NullInt64)
		case isps.FieldName:
			values[i] = new(sql.NullString)
		case isps.FieldCreatedAt, isps.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Isps fields.
func (_m *Isps) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case isps.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case isps.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case isps.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case isps.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				_m.Latitude = value.Float64
			}
		case isps.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				_m.Longitude = value.Float64
			}
		case isps.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Isps.
// This includes values selected through modifiers, order, etc.
func (_m *Isps) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryIspBlocks queries the "isp_blocks" edge of the Isps entity.
func (_m *Isps) QueryIspBlocks() *BlocksQuery {
	return NewIspsClient(_m.config).QueryIspBlocks(_m)
}

// Update returns a builder for updating this Isps.
// Note that you need to call Isps.Unwrap() before calling this method if this Isps
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Isps) Update() *IspsUpdateOne {
	return NewIspsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Isps entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Isps) Unwrap() *Isps {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Isps is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Isps) String() string {
	var builder strings.Builder
	builder.WriteString("Isps(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", _m.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", _m.Longitude))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// IspsSlice is a parsable slice of Isps.
type IspsSlice []*Isps
