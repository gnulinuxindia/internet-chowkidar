// Code generated by ent, DO NOT EDIT.

package sites

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Sites {
	return predicate.Sites(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Sites {
	return predicate.Sites(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Sites {
	return predicate.Sites(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Sites {
	return predicate.Sites(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Sites {
	return predicate.Sites(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Sites {
	return predicate.Sites(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Sites {
	return predicate.Sites(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldUpdatedAt, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldDomain, v))
}

// PingURL applies equality check predicate on the "ping_url" field. It's identical to PingURLEQ.
func PingURL(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldPingURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sites {
	return predicate.Sites(sql.FieldLTE(FieldUpdatedAt, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Sites {
	return predicate.Sites(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Sites {
	return predicate.Sites(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Sites {
	return predicate.Sites(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Sites {
	return predicate.Sites(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Sites {
	return predicate.Sites(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Sites {
	return predicate.Sites(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Sites {
	return predicate.Sites(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Sites {
	return predicate.Sites(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Sites {
	return predicate.Sites(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Sites {
	return predicate.Sites(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Sites {
	return predicate.Sites(sql.FieldContainsFold(FieldDomain, v))
}

// PingURLEQ applies the EQ predicate on the "ping_url" field.
func PingURLEQ(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEQ(FieldPingURL, v))
}

// PingURLNEQ applies the NEQ predicate on the "ping_url" field.
func PingURLNEQ(v string) predicate.Sites {
	return predicate.Sites(sql.FieldNEQ(FieldPingURL, v))
}

// PingURLIn applies the In predicate on the "ping_url" field.
func PingURLIn(vs ...string) predicate.Sites {
	return predicate.Sites(sql.FieldIn(FieldPingURL, vs...))
}

// PingURLNotIn applies the NotIn predicate on the "ping_url" field.
func PingURLNotIn(vs ...string) predicate.Sites {
	return predicate.Sites(sql.FieldNotIn(FieldPingURL, vs...))
}

// PingURLGT applies the GT predicate on the "ping_url" field.
func PingURLGT(v string) predicate.Sites {
	return predicate.Sites(sql.FieldGT(FieldPingURL, v))
}

// PingURLGTE applies the GTE predicate on the "ping_url" field.
func PingURLGTE(v string) predicate.Sites {
	return predicate.Sites(sql.FieldGTE(FieldPingURL, v))
}

// PingURLLT applies the LT predicate on the "ping_url" field.
func PingURLLT(v string) predicate.Sites {
	return predicate.Sites(sql.FieldLT(FieldPingURL, v))
}

// PingURLLTE applies the LTE predicate on the "ping_url" field.
func PingURLLTE(v string) predicate.Sites {
	return predicate.Sites(sql.FieldLTE(FieldPingURL, v))
}

// PingURLContains applies the Contains predicate on the "ping_url" field.
func PingURLContains(v string) predicate.Sites {
	return predicate.Sites(sql.FieldContains(FieldPingURL, v))
}

// PingURLHasPrefix applies the HasPrefix predicate on the "ping_url" field.
func PingURLHasPrefix(v string) predicate.Sites {
	return predicate.Sites(sql.FieldHasPrefix(FieldPingURL, v))
}

// PingURLHasSuffix applies the HasSuffix predicate on the "ping_url" field.
func PingURLHasSuffix(v string) predicate.Sites {
	return predicate.Sites(sql.FieldHasSuffix(FieldPingURL, v))
}

// PingURLEqualFold applies the EqualFold predicate on the "ping_url" field.
func PingURLEqualFold(v string) predicate.Sites {
	return predicate.Sites(sql.FieldEqualFold(FieldPingURL, v))
}

// PingURLContainsFold applies the ContainsFold predicate on the "ping_url" field.
func PingURLContainsFold(v string) predicate.Sites {
	return predicate.Sites(sql.FieldContainsFold(FieldPingURL, v))
}

// HasBlocks applies the HasEdge predicate on the "blocks" edge.
func HasBlocks() predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlocksTable, BlocksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlocksWith applies the HasEdge predicate on the "blocks" edge with a given conditions (other predicates).
func HasBlocksWith(preds ...predicate.Blocks) predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := newBlocksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSitesuggestions applies the HasEdge predicate on the "sitesuggestions" edge.
func HasSitesuggestions() predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SitesuggestionsTable, SitesuggestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSitesuggestionsWith applies the HasEdge predicate on the "sitesuggestions" edge with a given conditions (other predicates).
func HasSitesuggestionsWith(preds ...predicate.SiteSuggestions) predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := newSitesuggestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Categories) predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSitesCategories applies the HasEdge predicate on the "sites_categories" edge.
func HasSitesCategories() predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SitesCategoriesTable, SitesCategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSitesCategoriesWith applies the HasEdge predicate on the "sites_categories" edge with a given conditions (other predicates).
func HasSitesCategoriesWith(preds ...predicate.SitesCategories) predicate.Sites {
	return predicate.Sites(func(s *sql.Selector) {
		step := newSitesCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sites) predicate.Sites {
	return predicate.Sites(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sites) predicate.Sites {
	return predicate.Sites(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sites) predicate.Sites {
	return predicate.Sites(sql.NotPredicates(p))
}
