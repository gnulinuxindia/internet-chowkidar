// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnulinuxindia/internet-chowkidar/ent/blocks"
	"github.com/gnulinuxindia/internet-chowkidar/ent/isps"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
)

// Blocks is the model entity for the Blocks schema.
type Blocks struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SiteID holds the value of the "site_id" field.
	SiteID int `json:"site_id,omitempty"`
	// IspID holds the value of the "isp_id" field.
	IspID int `json:"isp_id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID int `json:"client_id,omitempty"`
	// Blocked holds the value of the "blocked" field.
	Blocked bool `json:"blocked,omitempty"`
	// LastReportedAt holds the value of the "last_reported_at" field.
	LastReportedAt time.Time `json:"last_reported_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlocksQuery when eager-loading is set.
	Edges        BlocksEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlocksEdges holds the relations/edges for other nodes in the graph.
type BlocksEdges struct {
	// Site holds the value of the site edge.
	Site *Sites `json:"site,omitempty"`
	// Isp holds the value of the isp edge.
	Isp *Isps `json:"isp,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlocksEdges) SiteOrErr() (*Sites, error) {
	if e.Site != nil {
		return e.Site, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sites.Label}
	}
	return nil, &NotLoadedError{edge: "site"}
}

// IspOrErr returns the Isp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlocksEdges) IspOrErr() (*Isps, error) {
	if e.Isp != nil {
		return e.Isp, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: isps.Label}
	}
	return nil, &NotLoadedError{edge: "isp"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blocks) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blocks.FieldBlocked:
			values[i] = new(sql.NullBool)
		case blocks.FieldID, blocks.FieldSiteID, blocks.FieldIspID, blocks.FieldClientID:
			values[i] = new(sql.NullInt64)
		case blocks.FieldCreatedAt, blocks.FieldUpdatedAt, blocks.FieldLastReportedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blocks fields.
func (_m *Blocks) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blocks.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case blocks.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case blocks.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case blocks.FieldSiteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field site_id", values[i])
			} else if value.Valid {
				_m.SiteID = int(value.Int64)
			}
		case blocks.FieldIspID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field isp_id", values[i])
			} else if value.Valid {
				_m.IspID = int(value.Int64)
			}
		case blocks.FieldClientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = int(value.Int64)
			}
		case blocks.FieldBlocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field blocked", values[i])
			} else if value.Valid {
				_m.Blocked = value.Bool
			}
		case blocks.FieldLastReportedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_reported_at", values[i])
			} else if value.Valid {
				_m.LastReportedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Blocks.
// This includes values selected through modifiers, order, etc.
func (_m *Blocks) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the Blocks entity.
func (_m *Blocks) QuerySite() *SitesQuery {
	return NewBlocksClient(_m.config).QuerySite(_m)
}

// QueryIsp queries the "isp" edge of the Blocks entity.
func (_m *Blocks) QueryIsp() *IspsQuery {
	return NewBlocksClient(_m.config).QueryIsp(_m)
}

// Update returns a builder for updating this Blocks.
// Note that you need to call Blocks.Unwrap() before calling this method if this Blocks
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Blocks) Update() *BlocksUpdateOne {
	return NewBlocksClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Blocks entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Blocks) Unwrap() *Blocks {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blocks is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Blocks) String() string {
	var builder strings.Builder
	builder.WriteString("Blocks(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("site_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SiteID))
	builder.WriteString(", ")
	builder.WriteString("isp_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.IspID))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ClientID))
	builder.WriteString(", ")
	builder.WriteString("blocked=")
	builder.WriteString(fmt.Sprintf("%v", _m.Blocked))
	builder.WriteString(", ")
	builder.WriteString("last_reported_at=")
	builder.WriteString(_m.LastReportedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlocksSlice is a parsable slice of Blocks.
type BlocksSlice []*Blocks
