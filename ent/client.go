// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/gnulinuxindia/internet-chowkidar/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnulinuxindia/internet-chowkidar/ent/blocks"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/counter"
	"github.com/gnulinuxindia/internet-chowkidar/ent/isps"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitescategories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitesuggestions"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Blocks is the client for interacting with the Blocks builders.
	Blocks *BlocksClient
	// Categories is the client for interacting with the Categories builders.
	Categories *CategoriesClient
	// Counter is the client for interacting with the Counter builders.
	Counter *CounterClient
	// Isps is the client for interacting with the Isps builders.
	Isps *IspsClient
	// SiteSuggestions is the client for interacting with the SiteSuggestions builders.
	SiteSuggestions *SiteSuggestionsClient
	// Sites is the client for interacting with the Sites builders.
	Sites *SitesClient
	// SitesCategories is the client for interacting with the SitesCategories builders.
	SitesCategories *SitesCategoriesClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Blocks = NewBlocksClient(c.config)
	c.Categories = NewCategoriesClient(c.config)
	c.Counter = NewCounterClient(c.config)
	c.Isps = NewIspsClient(c.config)
	c.SiteSuggestions = NewSiteSuggestionsClient(c.config)
	c.Sites = NewSitesClient(c.config)
	c.SitesCategories = NewSitesCategoriesClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Blocks:          NewBlocksClient(cfg),
		Categories:      NewCategoriesClient(cfg),
		Counter:         NewCounterClient(cfg),
		Isps:            NewIspsClient(cfg),
		SiteSuggestions: NewSiteSuggestionsClient(cfg),
		Sites:           NewSitesClient(cfg),
		SitesCategories: NewSitesCategoriesClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Blocks:          NewBlocksClient(cfg),
		Categories:      NewCategoriesClient(cfg),
		Counter:         NewCounterClient(cfg),
		Isps:            NewIspsClient(cfg),
		SiteSuggestions: NewSiteSuggestionsClient(cfg),
		Sites:           NewSitesClient(cfg),
		SitesCategories: NewSitesCategoriesClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Blocks.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Blocks, c.Categories, c.Counter, c.Isps, c.SiteSuggestions, c.Sites,
		c.SitesCategories,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Blocks, c.Categories, c.Counter, c.Isps, c.SiteSuggestions, c.Sites,
		c.SitesCategories,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlocksMutation:
		return c.Blocks.mutate(ctx, m)
	case *CategoriesMutation:
		return c.Categories.mutate(ctx, m)
	case *CounterMutation:
		return c.Counter.mutate(ctx, m)
	case *IspsMutation:
		return c.Isps.mutate(ctx, m)
	case *SiteSuggestionsMutation:
		return c.SiteSuggestions.mutate(ctx, m)
	case *SitesMutation:
		return c.Sites.mutate(ctx, m)
	case *SitesCategoriesMutation:
		return c.SitesCategories.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlocksClient is a client for the Blocks schema.
type BlocksClient struct {
	config
}

// NewBlocksClient returns a client for the Blocks from the given config.
func NewBlocksClient(c config) *BlocksClient {
	return &BlocksClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blocks.Hooks(f(g(h())))`.
func (c *BlocksClient) Use(hooks ...Hook) {
	c.hooks.Blocks = append(c.hooks.Blocks, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blocks.Intercept(f(g(h())))`.
func (c *BlocksClient) Intercept(interceptors ...Interceptor) {
	c.inters.Blocks = append(c.inters.Blocks, interceptors...)
}

// Create returns a builder for creating a Blocks entity.
func (c *BlocksClient) Create() *BlocksCreate {
	mutation := newBlocksMutation(c.config, OpCreate)
	return &BlocksCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Blocks entities.
func (c *BlocksClient) CreateBulk(builders ...*BlocksCreate) *BlocksCreateBulk {
	return &BlocksCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlocksClient) MapCreateBulk(slice any, setFunc func(*BlocksCreate, int)) *BlocksCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlocksCreateBulk{err: fmt.Errorf("calling to BlocksClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlocksCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlocksCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Blocks.
func (c *BlocksClient) Update() *BlocksUpdate {
	mutation := newBlocksMutation(c.config, OpUpdate)
	return &BlocksUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlocksClient) UpdateOne(_m *Blocks) *BlocksUpdateOne {
	mutation := newBlocksMutation(c.config, OpUpdateOne, withBlocks(_m))
	return &BlocksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlocksClient) UpdateOneID(id int) *BlocksUpdateOne {
	mutation := newBlocksMutation(c.config, OpUpdateOne, withBlocksID(id))
	return &BlocksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Blocks.
func (c *BlocksClient) Delete() *BlocksDelete {
	mutation := newBlocksMutation(c.config, OpDelete)
	return &BlocksDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlocksClient) DeleteOne(_m *Blocks) *BlocksDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlocksClient) DeleteOneID(id int) *BlocksDeleteOne {
	builder := c.Delete().Where(blocks.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlocksDeleteOne{builder}
}

// Query returns a query builder for Blocks.
func (c *BlocksClient) Query() *BlocksQuery {
	return &BlocksQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlocks},
		inters: c.Interceptors(),
	}
}

// Get returns a Blocks entity by its id.
func (c *BlocksClient) Get(ctx context.Context, id int) (*Blocks, error) {
	return c.Query().Where(blocks.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlocksClient) GetX(ctx context.Context, id int) *Blocks {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a Blocks.
func (c *BlocksClient) QuerySite(_m *Blocks) *SitesQuery {
	query := (&SitesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blocks.Table, blocks.FieldID, id),
			sqlgraph.To(sites.Table, sites.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blocks.SiteTable, blocks.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIsp queries the isp edge of a Blocks.
func (c *BlocksClient) QueryIsp(_m *Blocks) *IspsQuery {
	query := (&IspsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blocks.Table, blocks.FieldID, id),
			sqlgraph.To(isps.Table, isps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blocks.IspTable, blocks.IspColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlocksClient) Hooks() []Hook {
	return c.hooks.Blocks
}

// Interceptors returns the client interceptors.
func (c *BlocksClient) Interceptors() []Interceptor {
	return c.inters.Blocks
}

func (c *BlocksClient) mutate(ctx context.Context, m *BlocksMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlocksCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlocksUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlocksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlocksDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Blocks mutation op: %q", m.Op())
	}
}

// CategoriesClient is a client for the Categories schema.
type CategoriesClient struct {
	config
}

// NewCategoriesClient returns a client for the Categories from the given config.
func NewCategoriesClient(c config) *CategoriesClient {
	return &CategoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categories.Hooks(f(g(h())))`.
func (c *CategoriesClient) Use(hooks ...Hook) {
	c.hooks.Categories = append(c.hooks.Categories, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categories.Intercept(f(g(h())))`.
func (c *CategoriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Categories = append(c.inters.Categories, interceptors...)
}

// Create returns a builder for creating a Categories entity.
func (c *CategoriesClient) Create() *CategoriesCreate {
	mutation := newCategoriesMutation(c.config, OpCreate)
	return &CategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Categories entities.
func (c *CategoriesClient) CreateBulk(builders ...*CategoriesCreate) *CategoriesCreateBulk {
	return &CategoriesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoriesClient) MapCreateBulk(slice any, setFunc func(*CategoriesCreate, int)) *CategoriesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoriesCreateBulk{err: fmt.Errorf("calling to CategoriesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoriesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Categories.
func (c *CategoriesClient) Update() *CategoriesUpdate {
	mutation := newCategoriesMutation(c.config, OpUpdate)
	return &CategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoriesClient) UpdateOne(_m *Categories) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategories(_m))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoriesClient) UpdateOneID(id int) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategoriesID(id))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Categories.
func (c *CategoriesClient) Delete() *CategoriesDelete {
	mutation := newCategoriesMutation(c.config, OpDelete)
	return &CategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoriesClient) DeleteOne(_m *Categories) *CategoriesDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoriesClient) DeleteOneID(id int) *CategoriesDeleteOne {
	builder := c.Delete().Where(categories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoriesDeleteOne{builder}
}

// Query returns a query builder for Categories.
func (c *CategoriesClient) Query() *CategoriesQuery {
	return &CategoriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategories},
		inters: c.Interceptors(),
	}
}

// Get returns a Categories entity by its id.
func (c *CategoriesClient) Get(ctx context.Context, id int) (*Categories, error) {
	return c.Query().Where(categories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoriesClient) GetX(ctx context.Context, id int) *Categories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySites queries the sites edge of a Categories.
func (c *CategoriesClient) QuerySites(_m *Categories) *SitesQuery {
	query := (&SitesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(categories.Table, categories.FieldID, id),
			sqlgraph.To(sites.Table, sites.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, categories.SitesTable, categories.SitesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySitesCategories queries the sites_categories edge of a Categories.
func (c *CategoriesClient) QuerySitesCategories(_m *Categories) *SitesCategoriesQuery {
	query := (&SitesCategoriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(categories.Table, categories.FieldID, id),
			sqlgraph.To(sitescategories.Table, sitescategories.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, categories.SitesCategoriesTable, categories.SitesCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoriesClient) Hooks() []Hook {
	return c.hooks.Categories
}

// Interceptors returns the client interceptors.
func (c *CategoriesClient) Interceptors() []Interceptor {
	return c.inters.Categories
}

func (c *CategoriesClient) mutate(ctx context.Context, m *CategoriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Categories mutation op: %q", m.Op())
	}
}

// CounterClient is a client for the Counter schema.
type CounterClient struct {
	config
}

// NewCounterClient returns a client for the Counter from the given config.
func NewCounterClient(c config) *CounterClient {
	return &CounterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `counter.Hooks(f(g(h())))`.
func (c *CounterClient) Use(hooks ...Hook) {
	c.hooks.Counter = append(c.hooks.Counter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `counter.Intercept(f(g(h())))`.
func (c *CounterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Counter = append(c.inters.Counter, interceptors...)
}

// Create returns a builder for creating a Counter entity.
func (c *CounterClient) Create() *CounterCreate {
	mutation := newCounterMutation(c.config, OpCreate)
	return &CounterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Counter entities.
func (c *CounterClient) CreateBulk(builders ...*CounterCreate) *CounterCreateBulk {
	return &CounterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CounterClient) MapCreateBulk(slice any, setFunc func(*CounterCreate, int)) *CounterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CounterCreateBulk{err: fmt.Errorf("calling to CounterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CounterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CounterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Counter.
func (c *CounterClient) Update() *CounterUpdate {
	mutation := newCounterMutation(c.config, OpUpdate)
	return &CounterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CounterClient) UpdateOne(_m *Counter) *CounterUpdateOne {
	mutation := newCounterMutation(c.config, OpUpdateOne, withCounter(_m))
	return &CounterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CounterClient) UpdateOneID(id int) *CounterUpdateOne {
	mutation := newCounterMutation(c.config, OpUpdateOne, withCounterID(id))
	return &CounterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Counter.
func (c *CounterClient) Delete() *CounterDelete {
	mutation := newCounterMutation(c.config, OpDelete)
	return &CounterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CounterClient) DeleteOne(_m *Counter) *CounterDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CounterClient) DeleteOneID(id int) *CounterDeleteOne {
	builder := c.Delete().Where(counter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CounterDeleteOne{builder}
}

// Query returns a query builder for Counter.
func (c *CounterClient) Query() *CounterQuery {
	return &CounterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCounter},
		inters: c.Interceptors(),
	}
}

// Get returns a Counter entity by its id.
func (c *CounterClient) Get(ctx context.Context, id int) (*Counter, error) {
	return c.Query().Where(counter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CounterClient) GetX(ctx context.Context, id int) *Counter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CounterClient) Hooks() []Hook {
	return c.hooks.Counter
}

// Interceptors returns the client interceptors.
func (c *CounterClient) Interceptors() []Interceptor {
	return c.inters.Counter
}

func (c *CounterClient) mutate(ctx context.Context, m *CounterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CounterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CounterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CounterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CounterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Counter mutation op: %q", m.Op())
	}
}

// IspsClient is a client for the Isps schema.
type IspsClient struct {
	config
}

// NewIspsClient returns a client for the Isps from the given config.
func NewIspsClient(c config) *IspsClient {
	return &IspsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `isps.Hooks(f(g(h())))`.
func (c *IspsClient) Use(hooks ...Hook) {
	c.hooks.Isps = append(c.hooks.Isps, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `isps.Intercept(f(g(h())))`.
func (c *IspsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Isps = append(c.inters.Isps, interceptors...)
}

// Create returns a builder for creating a Isps entity.
func (c *IspsClient) Create() *IspsCreate {
	mutation := newIspsMutation(c.config, OpCreate)
	return &IspsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Isps entities.
func (c *IspsClient) CreateBulk(builders ...*IspsCreate) *IspsCreateBulk {
	return &IspsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IspsClient) MapCreateBulk(slice any, setFunc func(*IspsCreate, int)) *IspsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IspsCreateBulk{err: fmt.Errorf("calling to IspsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IspsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IspsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Isps.
func (c *IspsClient) Update() *IspsUpdate {
	mutation := newIspsMutation(c.config, OpUpdate)
	return &IspsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IspsClient) UpdateOne(_m *Isps) *IspsUpdateOne {
	mutation := newIspsMutation(c.config, OpUpdateOne, withIsps(_m))
	return &IspsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IspsClient) UpdateOneID(id int) *IspsUpdateOne {
	mutation := newIspsMutation(c.config, OpUpdateOne, withIspsID(id))
	return &IspsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Isps.
func (c *IspsClient) Delete() *IspsDelete {
	mutation := newIspsMutation(c.config, OpDelete)
	return &IspsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IspsClient) DeleteOne(_m *Isps) *IspsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IspsClient) DeleteOneID(id int) *IspsDeleteOne {
	builder := c.Delete().Where(isps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IspsDeleteOne{builder}
}

// Query returns a query builder for Isps.
func (c *IspsClient) Query() *IspsQuery {
	return &IspsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIsps},
		inters: c.Interceptors(),
	}
}

// Get returns a Isps entity by its id.
func (c *IspsClient) Get(ctx context.Context, id int) (*Isps, error) {
	return c.Query().Where(isps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IspsClient) GetX(ctx context.Context, id int) *Isps {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIspBlocks queries the isp_blocks edge of a Isps.
func (c *IspsClient) QueryIspBlocks(_m *Isps) *BlocksQuery {
	query := (&BlocksClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(isps.Table, isps.FieldID, id),
			sqlgraph.To(blocks.Table, blocks.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, isps.IspBlocksTable, isps.IspBlocksColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IspsClient) Hooks() []Hook {
	return c.hooks.Isps
}

// Interceptors returns the client interceptors.
func (c *IspsClient) Interceptors() []Interceptor {
	return c.inters.Isps
}

func (c *IspsClient) mutate(ctx context.Context, m *IspsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IspsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IspsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IspsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IspsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Isps mutation op: %q", m.Op())
	}
}

// SiteSuggestionsClient is a client for the SiteSuggestions schema.
type SiteSuggestionsClient struct {
	config
}

// NewSiteSuggestionsClient returns a client for the SiteSuggestions from the given config.
func NewSiteSuggestionsClient(c config) *SiteSuggestionsClient {
	return &SiteSuggestionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sitesuggestions.Hooks(f(g(h())))`.
func (c *SiteSuggestionsClient) Use(hooks ...Hook) {
	c.hooks.SiteSuggestions = append(c.hooks.SiteSuggestions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sitesuggestions.Intercept(f(g(h())))`.
func (c *SiteSuggestionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SiteSuggestions = append(c.inters.SiteSuggestions, interceptors...)
}

// Create returns a builder for creating a SiteSuggestions entity.
func (c *SiteSuggestionsClient) Create() *SiteSuggestionsCreate {
	mutation := newSiteSuggestionsMutation(c.config, OpCreate)
	return &SiteSuggestionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SiteSuggestions entities.
func (c *SiteSuggestionsClient) CreateBulk(builders ...*SiteSuggestionsCreate) *SiteSuggestionsCreateBulk {
	return &SiteSuggestionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SiteSuggestionsClient) MapCreateBulk(slice any, setFunc func(*SiteSuggestionsCreate, int)) *SiteSuggestionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SiteSuggestionsCreateBulk{err: fmt.Errorf("calling to SiteSuggestionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SiteSuggestionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SiteSuggestionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SiteSuggestions.
func (c *SiteSuggestionsClient) Update() *SiteSuggestionsUpdate {
	mutation := newSiteSuggestionsMutation(c.config, OpUpdate)
	return &SiteSuggestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteSuggestionsClient) UpdateOne(_m *SiteSuggestions) *SiteSuggestionsUpdateOne {
	mutation := newSiteSuggestionsMutation(c.config, OpUpdateOne, withSiteSuggestions(_m))
	return &SiteSuggestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteSuggestionsClient) UpdateOneID(id int) *SiteSuggestionsUpdateOne {
	mutation := newSiteSuggestionsMutation(c.config, OpUpdateOne, withSiteSuggestionsID(id))
	return &SiteSuggestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SiteSuggestions.
func (c *SiteSuggestionsClient) Delete() *SiteSuggestionsDelete {
	mutation := newSiteSuggestionsMutation(c.config, OpDelete)
	return &SiteSuggestionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteSuggestionsClient) DeleteOne(_m *SiteSuggestions) *SiteSuggestionsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SiteSuggestionsClient) DeleteOneID(id int) *SiteSuggestionsDeleteOne {
	builder := c.Delete().Where(sitesuggestions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteSuggestionsDeleteOne{builder}
}

// Query returns a query builder for SiteSuggestions.
func (c *SiteSuggestionsClient) Query() *SiteSuggestionsQuery {
	return &SiteSuggestionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSiteSuggestions},
		inters: c.Interceptors(),
	}
}

// Get returns a SiteSuggestions entity by its id.
func (c *SiteSuggestionsClient) Get(ctx context.Context, id int) (*SiteSuggestions, error) {
	return c.Query().Where(sitesuggestions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteSuggestionsClient) GetX(ctx context.Context, id int) *SiteSuggestions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SiteSuggestionsClient) Hooks() []Hook {
	return c.hooks.SiteSuggestions
}

// Interceptors returns the client interceptors.
func (c *SiteSuggestionsClient) Interceptors() []Interceptor {
	return c.inters.SiteSuggestions
}

func (c *SiteSuggestionsClient) mutate(ctx context.Context, m *SiteSuggestionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SiteSuggestionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SiteSuggestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SiteSuggestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SiteSuggestionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SiteSuggestions mutation op: %q", m.Op())
	}
}

// SitesClient is a client for the Sites schema.
type SitesClient struct {
	config
}

// NewSitesClient returns a client for the Sites from the given config.
func NewSitesClient(c config) *SitesClient {
	return &SitesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sites.Hooks(f(g(h())))`.
func (c *SitesClient) Use(hooks ...Hook) {
	c.hooks.Sites = append(c.hooks.Sites, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sites.Intercept(f(g(h())))`.
func (c *SitesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sites = append(c.inters.Sites, interceptors...)
}

// Create returns a builder for creating a Sites entity.
func (c *SitesClient) Create() *SitesCreate {
	mutation := newSitesMutation(c.config, OpCreate)
	return &SitesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sites entities.
func (c *SitesClient) CreateBulk(builders ...*SitesCreate) *SitesCreateBulk {
	return &SitesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SitesClient) MapCreateBulk(slice any, setFunc func(*SitesCreate, int)) *SitesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SitesCreateBulk{err: fmt.Errorf("calling to SitesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SitesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SitesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sites.
func (c *SitesClient) Update() *SitesUpdate {
	mutation := newSitesMutation(c.config, OpUpdate)
	return &SitesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SitesClient) UpdateOne(_m *Sites) *SitesUpdateOne {
	mutation := newSitesMutation(c.config, OpUpdateOne, withSites(_m))
	return &SitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SitesClient) UpdateOneID(id int) *SitesUpdateOne {
	mutation := newSitesMutation(c.config, OpUpdateOne, withSitesID(id))
	return &SitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sites.
func (c *SitesClient) Delete() *SitesDelete {
	mutation := newSitesMutation(c.config, OpDelete)
	return &SitesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SitesClient) DeleteOne(_m *Sites) *SitesDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SitesClient) DeleteOneID(id int) *SitesDeleteOne {
	builder := c.Delete().Where(sites.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SitesDeleteOne{builder}
}

// Query returns a query builder for Sites.
func (c *SitesClient) Query() *SitesQuery {
	return &SitesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSites},
		inters: c.Interceptors(),
	}
}

// Get returns a Sites entity by its id.
func (c *SitesClient) Get(ctx context.Context, id int) (*Sites, error) {
	return c.Query().Where(sites.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SitesClient) GetX(ctx context.Context, id int) *Sites {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlocks queries the blocks edge of a Sites.
func (c *SitesClient) QueryBlocks(_m *Sites) *BlocksQuery {
	query := (&BlocksClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sites.Table, sites.FieldID, id),
			sqlgraph.To(blocks.Table, blocks.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sites.BlocksTable, sites.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a Sites.
func (c *SitesClient) QueryCategories(_m *Sites) *CategoriesQuery {
	query := (&CategoriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sites.Table, sites.FieldID, id),
			sqlgraph.To(categories.Table, categories.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sites.CategoriesTable, sites.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySitesCategories queries the sites_categories edge of a Sites.
func (c *SitesClient) QuerySitesCategories(_m *Sites) *SitesCategoriesQuery {
	query := (&SitesCategoriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sites.Table, sites.FieldID, id),
			sqlgraph.To(sitescategories.Table, sitescategories.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sites.SitesCategoriesTable, sites.SitesCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SitesClient) Hooks() []Hook {
	return c.hooks.Sites
}

// Interceptors returns the client interceptors.
func (c *SitesClient) Interceptors() []Interceptor {
	return c.inters.Sites
}

func (c *SitesClient) mutate(ctx context.Context, m *SitesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SitesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SitesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SitesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sites mutation op: %q", m.Op())
	}
}

// SitesCategoriesClient is a client for the SitesCategories schema.
type SitesCategoriesClient struct {
	config
}

// NewSitesCategoriesClient returns a client for the SitesCategories from the given config.
func NewSitesCategoriesClient(c config) *SitesCategoriesClient {
	return &SitesCategoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sitescategories.Hooks(f(g(h())))`.
func (c *SitesCategoriesClient) Use(hooks ...Hook) {
	c.hooks.SitesCategories = append(c.hooks.SitesCategories, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sitescategories.Intercept(f(g(h())))`.
func (c *SitesCategoriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.SitesCategories = append(c.inters.SitesCategories, interceptors...)
}

// Create returns a builder for creating a SitesCategories entity.
func (c *SitesCategoriesClient) Create() *SitesCategoriesCreate {
	mutation := newSitesCategoriesMutation(c.config, OpCreate)
	return &SitesCategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SitesCategories entities.
func (c *SitesCategoriesClient) CreateBulk(builders ...*SitesCategoriesCreate) *SitesCategoriesCreateBulk {
	return &SitesCategoriesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SitesCategoriesClient) MapCreateBulk(slice any, setFunc func(*SitesCategoriesCreate, int)) *SitesCategoriesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SitesCategoriesCreateBulk{err: fmt.Errorf("calling to SitesCategoriesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SitesCategoriesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SitesCategoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SitesCategories.
func (c *SitesCategoriesClient) Update() *SitesCategoriesUpdate {
	mutation := newSitesCategoriesMutation(c.config, OpUpdate)
	return &SitesCategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SitesCategoriesClient) UpdateOne(_m *SitesCategories) *SitesCategoriesUpdateOne {
	mutation := newSitesCategoriesMutation(c.config, OpUpdateOne, withSitesCategories(_m))
	return &SitesCategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SitesCategoriesClient) UpdateOneID(id int) *SitesCategoriesUpdateOne {
	mutation := newSitesCategoriesMutation(c.config, OpUpdateOne, withSitesCategoriesID(id))
	return &SitesCategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SitesCategories.
func (c *SitesCategoriesClient) Delete() *SitesCategoriesDelete {
	mutation := newSitesCategoriesMutation(c.config, OpDelete)
	return &SitesCategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SitesCategoriesClient) DeleteOne(_m *SitesCategories) *SitesCategoriesDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SitesCategoriesClient) DeleteOneID(id int) *SitesCategoriesDeleteOne {
	builder := c.Delete().Where(sitescategories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SitesCategoriesDeleteOne{builder}
}

// Query returns a query builder for SitesCategories.
func (c *SitesCategoriesClient) Query() *SitesCategoriesQuery {
	return &SitesCategoriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSitesCategories},
		inters: c.Interceptors(),
	}
}

// Get returns a SitesCategories entity by its id.
func (c *SitesCategoriesClient) Get(ctx context.Context, id int) (*SitesCategories, error) {
	return c.Query().Where(sitescategories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SitesCategoriesClient) GetX(ctx context.Context, id int) *SitesCategories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySites queries the sites edge of a SitesCategories.
func (c *SitesCategoriesClient) QuerySites(_m *SitesCategories) *SitesQuery {
	query := (&SitesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sitescategories.Table, sitescategories.FieldID, id),
			sqlgraph.To(sites.Table, sites.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sitescategories.SitesTable, sitescategories.SitesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a SitesCategories.
func (c *SitesCategoriesClient) QueryCategories(_m *SitesCategories) *CategoriesQuery {
	query := (&CategoriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sitescategories.Table, sitescategories.FieldID, id),
			sqlgraph.To(categories.Table, categories.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sitescategories.CategoriesTable, sitescategories.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SitesCategoriesClient) Hooks() []Hook {
	return c.hooks.SitesCategories
}

// Interceptors returns the client interceptors.
func (c *SitesCategoriesClient) Interceptors() []Interceptor {
	return c.inters.SitesCategories
}

func (c *SitesCategoriesClient) mutate(ctx context.Context, m *SitesCategoriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SitesCategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SitesCategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SitesCategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SitesCategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SitesCategories mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Blocks, Categories, Counter, Isps, SiteSuggestions, Sites,
		SitesCategories []ent.Hook
	}
	inters struct {
		Blocks, Categories, Counter, Isps, SiteSuggestions, Sites,
		SitesCategories []ent.Interceptor
	}
)
