// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/blocks"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitescategories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitesuggestions"
)

// SitesUpdate is the builder for updating Sites entities.
type SitesUpdate struct {
	config
	hooks    []Hook
	mutation *SitesMutation
}

// Where appends a list predicates to the SitesUpdate builder.
func (_u *SitesUpdate) Where(ps ...predicate.Sites) *SitesUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SitesUpdate) SetUpdatedAt(v time.Time) *SitesUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SitesUpdate) SetDomain(v string) *SitesUpdate {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SitesUpdate) SetNillableDomain(v *string) *SitesUpdate {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetPingURL sets the "ping_url" field.
func (_u *SitesUpdate) SetPingURL(v string) *SitesUpdate {
	_u.mutation.SetPingURL(v)
	return _u
}

// SetNillablePingURL sets the "ping_url" field if the given value is not nil.
func (_u *SitesUpdate) SetNillablePingURL(v *string) *SitesUpdate {
	if v != nil {
		_u.SetPingURL(*v)
	}
	return _u
}

// AddBlockIDs adds the "blocks" edge to the Blocks entity by IDs.
func (_u *SitesUpdate) AddBlockIDs(ids ...int) *SitesUpdate {
	_u.mutation.AddBlockIDs(ids...)
	return _u
}

// AddBlocks adds the "blocks" edges to the Blocks entity.
func (_u *SitesUpdate) AddBlocks(v ...*Blocks) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockIDs(ids...)
}

// AddSitesuggestionIDs adds the "sitesuggestions" edge to the SiteSuggestions entity by IDs.
func (_u *SitesUpdate) AddSitesuggestionIDs(ids ...int) *SitesUpdate {
	_u.mutation.AddSitesuggestionIDs(ids...)
	return _u
}

// AddSitesuggestions adds the "sitesuggestions" edges to the SiteSuggestions entity.
func (_u *SitesUpdate) AddSitesuggestions(v ...*SiteSuggestions) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSitesuggestionIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Categories entity by IDs.
func (_u *SitesUpdate) AddCategoryIDs(ids ...int) *SitesUpdate {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the Categories entity.
func (_u *SitesUpdate) AddCategories(v ...*Categories) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddSitesCategoryIDs adds the "sites_categories" edge to the SitesCategories entity by IDs.
func (_u *SitesUpdate) AddSitesCategoryIDs(ids ...int) *SitesUpdate {
	_u.mutation.AddSitesCategoryIDs(ids...)
	return _u
}

// AddSitesCategories adds the "sites_categories" edges to the SitesCategories entity.
func (_u *SitesUpdate) AddSitesCategories(v ...*SitesCategories) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSitesCategoryIDs(ids...)
}

// Mutation returns the SitesMutation object of the builder.
func (_u *SitesUpdate) Mutation() *SitesMutation {
	return _u.mutation
}

// ClearBlocks clears all "blocks" edges to the Blocks entity.
func (_u *SitesUpdate) ClearBlocks() *SitesUpdate {
	_u.mutation.ClearBlocks()
	return _u
}

// RemoveBlockIDs removes the "blocks" edge to Blocks entities by IDs.
func (_u *SitesUpdate) RemoveBlockIDs(ids ...int) *SitesUpdate {
	_u.mutation.RemoveBlockIDs(ids...)
	return _u
}

// RemoveBlocks removes "blocks" edges to Blocks entities.
func (_u *SitesUpdate) RemoveBlocks(v ...*Blocks) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockIDs(ids...)
}

// ClearSitesuggestions clears all "sitesuggestions" edges to the SiteSuggestions entity.
func (_u *SitesUpdate) ClearSitesuggestions() *SitesUpdate {
	_u.mutation.ClearSitesuggestions()
	return _u
}

// RemoveSitesuggestionIDs removes the "sitesuggestions" edge to SiteSuggestions entities by IDs.
func (_u *SitesUpdate) RemoveSitesuggestionIDs(ids ...int) *SitesUpdate {
	_u.mutation.RemoveSitesuggestionIDs(ids...)
	return _u
}

// RemoveSitesuggestions removes "sitesuggestions" edges to SiteSuggestions entities.
func (_u *SitesUpdate) RemoveSitesuggestions(v ...*SiteSuggestions) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSitesuggestionIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Categories entity.
func (_u *SitesUpdate) ClearCategories() *SitesUpdate {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to Categories entities by IDs.
func (_u *SitesUpdate) RemoveCategoryIDs(ids ...int) *SitesUpdate {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to Categories entities.
func (_u *SitesUpdate) RemoveCategories(v ...*Categories) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearSitesCategories clears all "sites_categories" edges to the SitesCategories entity.
func (_u *SitesUpdate) ClearSitesCategories() *SitesUpdate {
	_u.mutation.ClearSitesCategories()
	return _u
}

// RemoveSitesCategoryIDs removes the "sites_categories" edge to SitesCategories entities by IDs.
func (_u *SitesUpdate) RemoveSitesCategoryIDs(ids ...int) *SitesUpdate {
	_u.mutation.RemoveSitesCategoryIDs(ids...)
	return _u
}

// RemoveSitesCategories removes "sites_categories" edges to SitesCategories entities.
func (_u *SitesUpdate) RemoveSitesCategories(v ...*SitesCategories) *SitesUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSitesCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SitesUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SitesUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SitesUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SitesUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SitesUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := sites.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SitesUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sites.Table, sites.Columns, sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sites.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sites.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.PingURL(); ok {
		_spec.SetField(sites.FieldPingURL, field.TypeString, value)
	}
	if _u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !_u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SitesuggestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesuggestionsIDs(); len(nodes) > 0 && !_u.mutation.SitesuggestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesuggestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesCategoriesIDs(); len(nodes) > 0 && !_u.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sites.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SitesUpdateOne is the builder for updating a single Sites entity.
type SitesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SitesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SitesUpdateOne) SetUpdatedAt(v time.Time) *SitesUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SitesUpdateOne) SetDomain(v string) *SitesUpdateOne {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SitesUpdateOne) SetNillableDomain(v *string) *SitesUpdateOne {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetPingURL sets the "ping_url" field.
func (_u *SitesUpdateOne) SetPingURL(v string) *SitesUpdateOne {
	_u.mutation.SetPingURL(v)
	return _u
}

// SetNillablePingURL sets the "ping_url" field if the given value is not nil.
func (_u *SitesUpdateOne) SetNillablePingURL(v *string) *SitesUpdateOne {
	if v != nil {
		_u.SetPingURL(*v)
	}
	return _u
}

// AddBlockIDs adds the "blocks" edge to the Blocks entity by IDs.
func (_u *SitesUpdateOne) AddBlockIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.AddBlockIDs(ids...)
	return _u
}

// AddBlocks adds the "blocks" edges to the Blocks entity.
func (_u *SitesUpdateOne) AddBlocks(v ...*Blocks) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockIDs(ids...)
}

// AddSitesuggestionIDs adds the "sitesuggestions" edge to the SiteSuggestions entity by IDs.
func (_u *SitesUpdateOne) AddSitesuggestionIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.AddSitesuggestionIDs(ids...)
	return _u
}

// AddSitesuggestions adds the "sitesuggestions" edges to the SiteSuggestions entity.
func (_u *SitesUpdateOne) AddSitesuggestions(v ...*SiteSuggestions) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSitesuggestionIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Categories entity by IDs.
func (_u *SitesUpdateOne) AddCategoryIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the Categories entity.
func (_u *SitesUpdateOne) AddCategories(v ...*Categories) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddSitesCategoryIDs adds the "sites_categories" edge to the SitesCategories entity by IDs.
func (_u *SitesUpdateOne) AddSitesCategoryIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.AddSitesCategoryIDs(ids...)
	return _u
}

// AddSitesCategories adds the "sites_categories" edges to the SitesCategories entity.
func (_u *SitesUpdateOne) AddSitesCategories(v ...*SitesCategories) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSitesCategoryIDs(ids...)
}

// Mutation returns the SitesMutation object of the builder.
func (_u *SitesUpdateOne) Mutation() *SitesMutation {
	return _u.mutation
}

// ClearBlocks clears all "blocks" edges to the Blocks entity.
func (_u *SitesUpdateOne) ClearBlocks() *SitesUpdateOne {
	_u.mutation.ClearBlocks()
	return _u
}

// RemoveBlockIDs removes the "blocks" edge to Blocks entities by IDs.
func (_u *SitesUpdateOne) RemoveBlockIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.RemoveBlockIDs(ids...)
	return _u
}

// RemoveBlocks removes "blocks" edges to Blocks entities.
func (_u *SitesUpdateOne) RemoveBlocks(v ...*Blocks) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockIDs(ids...)
}

// ClearSitesuggestions clears all "sitesuggestions" edges to the SiteSuggestions entity.
func (_u *SitesUpdateOne) ClearSitesuggestions() *SitesUpdateOne {
	_u.mutation.ClearSitesuggestions()
	return _u
}

// RemoveSitesuggestionIDs removes the "sitesuggestions" edge to SiteSuggestions entities by IDs.
func (_u *SitesUpdateOne) RemoveSitesuggestionIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.RemoveSitesuggestionIDs(ids...)
	return _u
}

// RemoveSitesuggestions removes "sitesuggestions" edges to SiteSuggestions entities.
func (_u *SitesUpdateOne) RemoveSitesuggestions(v ...*SiteSuggestions) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSitesuggestionIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Categories entity.
func (_u *SitesUpdateOne) ClearCategories() *SitesUpdateOne {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to Categories entities by IDs.
func (_u *SitesUpdateOne) RemoveCategoryIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to Categories entities.
func (_u *SitesUpdateOne) RemoveCategories(v ...*Categories) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearSitesCategories clears all "sites_categories" edges to the SitesCategories entity.
func (_u *SitesUpdateOne) ClearSitesCategories() *SitesUpdateOne {
	_u.mutation.ClearSitesCategories()
	return _u
}

// RemoveSitesCategoryIDs removes the "sites_categories" edge to SitesCategories entities by IDs.
func (_u *SitesUpdateOne) RemoveSitesCategoryIDs(ids ...int) *SitesUpdateOne {
	_u.mutation.RemoveSitesCategoryIDs(ids...)
	return _u
}

// RemoveSitesCategories removes "sites_categories" edges to SitesCategories entities.
func (_u *SitesUpdateOne) RemoveSitesCategories(v ...*SitesCategories) *SitesUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSitesCategoryIDs(ids...)
}

// Where appends a list predicates to the SitesUpdate builder.
func (_u *SitesUpdateOne) Where(ps ...predicate.Sites) *SitesUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SitesUpdateOne) Select(field string, fields ...string) *SitesUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Sites entity.
func (_u *SitesUpdateOne) Save(ctx context.Context) (*Sites, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SitesUpdateOne) SaveX(ctx context.Context) *Sites {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SitesUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SitesUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SitesUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := sites.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SitesUpdateOne) sqlSave(ctx context.Context) (_node *Sites, err error) {
	_spec := sqlgraph.NewUpdateSpec(sites.Table, sites.Columns, sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sites.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sites.FieldID)
		for _, f := range fields {
			if !sites.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sites.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sites.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sites.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.PingURL(); ok {
		_spec.SetField(sites.FieldPingURL, field.TypeString, value)
	}
	if _u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !_u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.BlocksTable,
			Columns: []string{sites.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SitesuggestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesuggestionsIDs(); len(nodes) > 0 && !_u.mutation.SitesuggestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesuggestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sites.SitesuggestionsTable,
			Columns: []string{sites.SitesuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sites.CategoriesTable,
			Columns: sites.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSitesCategoriesIDs(); len(nodes) > 0 && !_u.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SitesCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sites.SitesCategoriesTable,
			Columns: []string{sites.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sites{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sites.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
