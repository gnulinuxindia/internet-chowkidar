// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitesuggestions"
)

// SiteSuggestionsUpdate is the builder for updating SiteSuggestions entities.
type SiteSuggestionsUpdate struct {
	config
	hooks    []Hook
	mutation *SiteSuggestionsMutation
}

// Where appends a list predicates to the SiteSuggestionsUpdate builder.
func (_u *SiteSuggestionsUpdate) Where(ps ...predicate.SiteSuggestions) *SiteSuggestionsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteSuggestionsUpdate) SetUpdatedAt(v time.Time) *SiteSuggestionsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SiteSuggestionsUpdate) SetDomain(v string) *SiteSuggestionsUpdate {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableDomain(v *string) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetPingURL sets the "ping_url" field.
func (_u *SiteSuggestionsUpdate) SetPingURL(v string) *SiteSuggestionsUpdate {
	_u.mutation.SetPingURL(v)
	return _u
}

// SetNillablePingURL sets the "ping_url" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillablePingURL(v *string) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetPingURL(*v)
	}
	return _u
}

// SetCategories sets the "categories" field.
func (_u *SiteSuggestionsUpdate) SetCategories(v string) *SiteSuggestionsUpdate {
	_u.mutation.SetCategories(v)
	return _u
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableCategories(v *string) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetCategories(*v)
	}
	return _u
}

// ClearCategories clears the value of the "categories" field.
func (_u *SiteSuggestionsUpdate) ClearCategories() *SiteSuggestionsUpdate {
	_u.mutation.ClearCategories()
	return _u
}

// SetReason sets the "reason" field.
func (_u *SiteSuggestionsUpdate) SetReason(v string) *SiteSuggestionsUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableReason(v *string) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SiteSuggestionsUpdate) SetStatus(v sitesuggestions.Status) *SiteSuggestionsUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableStatus(v *sitesuggestions.Status) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetResolveReason sets the "resolve_reason" field.
func (_u *SiteSuggestionsUpdate) SetResolveReason(v string) *SiteSuggestionsUpdate {
	_u.mutation.SetResolveReason(v)
	return _u
}

// SetNillableResolveReason sets the "resolve_reason" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableResolveReason(v *string) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetResolveReason(*v)
	}
	return _u
}

// ClearResolveReason clears the value of the "resolve_reason" field.
func (_u *SiteSuggestionsUpdate) ClearResolveReason() *SiteSuggestionsUpdate {
	_u.mutation.ClearResolveReason()
	return _u
}

// SetLinkedSite sets the "linked_site" field.
func (_u *SiteSuggestionsUpdate) SetLinkedSite(v int) *SiteSuggestionsUpdate {
	_u.mutation.SetLinkedSite(v)
	return _u
}

// SetNillableLinkedSite sets the "linked_site" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableLinkedSite(v *int) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetLinkedSite(*v)
	}
	return _u
}

// ClearLinkedSite clears the value of the "linked_site" field.
func (_u *SiteSuggestionsUpdate) ClearLinkedSite() *SiteSuggestionsUpdate {
	_u.mutation.ClearLinkedSite()
	return _u
}

// SetResolvedAt sets the "resolved_at" field.
func (_u *SiteSuggestionsUpdate) SetResolvedAt(v time.Time) *SiteSuggestionsUpdate {
	_u.mutation.SetResolvedAt(v)
	return _u
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableResolvedAt(v *time.Time) *SiteSuggestionsUpdate {
	if v != nil {
		_u.SetResolvedAt(*v)
	}
	return _u
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (_u *SiteSuggestionsUpdate) ClearResolvedAt() *SiteSuggestionsUpdate {
	_u.mutation.ClearResolvedAt()
	return _u
}

// SetSiteID sets the "site" edge to the Sites entity by ID.
func (_u *SiteSuggestionsUpdate) SetSiteID(id int) *SiteSuggestionsUpdate {
	_u.mutation.SetSiteID(id)
	return _u
}

// SetNillableSiteID sets the "site" edge to the Sites entity by ID if the given value is not nil.
func (_u *SiteSuggestionsUpdate) SetNillableSiteID(id *int) *SiteSuggestionsUpdate {
	if id != nil {
		_u = _u.SetSiteID(*id)
	}
	return _u
}

// SetSite sets the "site" edge to the Sites entity.
func (_u *SiteSuggestionsUpdate) SetSite(v *Sites) *SiteSuggestionsUpdate {
	return _u.SetSiteID(v.ID)
}

// Mutation returns the SiteSuggestionsMutation object of the builder.
func (_u *SiteSuggestionsUpdate) Mutation() *SiteSuggestionsMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the Sites entity.
func (_u *SiteSuggestionsUpdate) ClearSite() *SiteSuggestionsUpdate {
	_u.mutation.ClearSite()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SiteSuggestionsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteSuggestionsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SiteSuggestionsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteSuggestionsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SiteSuggestionsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := sitesuggestions.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SiteSuggestionsUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := sitesuggestions.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SiteSuggestions.status": %w`, err)}
		}
	}
	return nil
}

func (_u *SiteSuggestionsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitesuggestions.Table, sitesuggestions.Columns, sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sitesuggestions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sitesuggestions.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.PingURL(); ok {
		_spec.SetField(sitesuggestions.FieldPingURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Categories(); ok {
		_spec.SetField(sitesuggestions.FieldCategories, field.TypeString, value)
	}
	if _u.mutation.CategoriesCleared() {
		_spec.ClearField(sitesuggestions.FieldCategories, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(sitesuggestions.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sitesuggestions.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ResolveReason(); ok {
		_spec.SetField(sitesuggestions.FieldResolveReason, field.TypeString, value)
	}
	if _u.mutation.ResolveReasonCleared() {
		_spec.ClearField(sitesuggestions.FieldResolveReason, field.TypeString)
	}
	if value, ok := _u.mutation.ResolvedAt(); ok {
		_spec.SetField(sitesuggestions.FieldResolvedAt, field.TypeTime, value)
	}
	if _u.mutation.ResolvedAtCleared() {
		_spec.ClearField(sitesuggestions.FieldResolvedAt, field.TypeTime)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitesuggestions.SiteTable,
			Columns: []string{sitesuggestions.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitesuggestions.SiteTable,
			Columns: []string{sitesuggestions.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitesuggestions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SiteSuggestionsUpdateOne is the builder for updating a single SiteSuggestions entity.
type SiteSuggestionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteSuggestionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteSuggestionsUpdateOne) SetUpdatedAt(v time.Time) *SiteSuggestionsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SiteSuggestionsUpdateOne) SetDomain(v string) *SiteSuggestionsUpdateOne {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableDomain(v *string) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// SetPingURL sets the "ping_url" field.
func (_u *SiteSuggestionsUpdateOne) SetPingURL(v string) *SiteSuggestionsUpdateOne {
	_u.mutation.SetPingURL(v)
	return _u
}

// SetNillablePingURL sets the "ping_url" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillablePingURL(v *string) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetPingURL(*v)
	}
	return _u
}

// SetCategories sets the "categories" field.
func (_u *SiteSuggestionsUpdateOne) SetCategories(v string) *SiteSuggestionsUpdateOne {
	_u.mutation.SetCategories(v)
	return _u
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableCategories(v *string) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetCategories(*v)
	}
	return _u
}

// ClearCategories clears the value of the "categories" field.
func (_u *SiteSuggestionsUpdateOne) ClearCategories() *SiteSuggestionsUpdateOne {
	_u.mutation.ClearCategories()
	return _u
}

// SetReason sets the "reason" field.
func (_u *SiteSuggestionsUpdateOne) SetReason(v string) *SiteSuggestionsUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableReason(v *string) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SiteSuggestionsUpdateOne) SetStatus(v sitesuggestions.Status) *SiteSuggestionsUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableStatus(v *sitesuggestions.Status) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetResolveReason sets the "resolve_reason" field.
func (_u *SiteSuggestionsUpdateOne) SetResolveReason(v string) *SiteSuggestionsUpdateOne {
	_u.mutation.SetResolveReason(v)
	return _u
}

// SetNillableResolveReason sets the "resolve_reason" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableResolveReason(v *string) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetResolveReason(*v)
	}
	return _u
}

// ClearResolveReason clears the value of the "resolve_reason" field.
func (_u *SiteSuggestionsUpdateOne) ClearResolveReason() *SiteSuggestionsUpdateOne {
	_u.mutation.ClearResolveReason()
	return _u
}

// SetLinkedSite sets the "linked_site" field.
func (_u *SiteSuggestionsUpdateOne) SetLinkedSite(v int) *SiteSuggestionsUpdateOne {
	_u.mutation.SetLinkedSite(v)
	return _u
}

// SetNillableLinkedSite sets the "linked_site" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableLinkedSite(v *int) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetLinkedSite(*v)
	}
	return _u
}

// ClearLinkedSite clears the value of the "linked_site" field.
func (_u *SiteSuggestionsUpdateOne) ClearLinkedSite() *SiteSuggestionsUpdateOne {
	_u.mutation.ClearLinkedSite()
	return _u
}

// SetResolvedAt sets the "resolved_at" field.
func (_u *SiteSuggestionsUpdateOne) SetResolvedAt(v time.Time) *SiteSuggestionsUpdateOne {
	_u.mutation.SetResolvedAt(v)
	return _u
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableResolvedAt(v *time.Time) *SiteSuggestionsUpdateOne {
	if v != nil {
		_u.SetResolvedAt(*v)
	}
	return _u
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (_u *SiteSuggestionsUpdateOne) ClearResolvedAt() *SiteSuggestionsUpdateOne {
	_u.mutation.ClearResolvedAt()
	return _u
}

// SetSiteID sets the "site" edge to the Sites entity by ID.
func (_u *SiteSuggestionsUpdateOne) SetSiteID(id int) *SiteSuggestionsUpdateOne {
	_u.mutation.SetSiteID(id)
	return _u
}

// SetNillableSiteID sets the "site" edge to the Sites entity by ID if the given value is not nil.
func (_u *SiteSuggestionsUpdateOne) SetNillableSiteID(id *int) *SiteSuggestionsUpdateOne {
	if id != nil {
		_u = _u.SetSiteID(*id)
	}
	return _u
}

// SetSite sets the "site" edge to the Sites entity.
func (_u *SiteSuggestionsUpdateOne) SetSite(v *Sites) *SiteSuggestionsUpdateOne {
	return _u.SetSiteID(v.ID)
}

// Mutation returns the SiteSuggestionsMutation object of the builder.
func (_u *SiteSuggestionsUpdateOne) Mutation() *SiteSuggestionsMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the Sites entity.
func (_u *SiteSuggestionsUpdateOne) ClearSite() *SiteSuggestionsUpdateOne {
	_u.mutation.ClearSite()
	return _u
}

// Where appends a list predicates to the SiteSuggestionsUpdate builder.
func (_u *SiteSuggestionsUpdateOne) Where(ps ...predicate.SiteSuggestions) *SiteSuggestionsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SiteSuggestionsUpdateOne) Select(field string, fields ...string) *SiteSuggestionsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SiteSuggestions entity.
func (_u *SiteSuggestionsUpdateOne) Save(ctx context.Context) (*SiteSuggestions, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteSuggestionsUpdateOne) SaveX(ctx context.Context) *SiteSuggestions {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SiteSuggestionsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteSuggestionsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SiteSuggestionsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := sitesuggestions.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SiteSuggestionsUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := sitesuggestions.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SiteSuggestions.status": %w`, err)}
		}
	}
	return nil
}

func (_u *SiteSuggestionsUpdateOne) sqlSave(ctx context.Context) (_node *SiteSuggestions, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitesuggestions.Table, sitesuggestions.Columns, sqlgraph.NewFieldSpec(sitesuggestions.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteSuggestions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitesuggestions.FieldID)
		for _, f := range fields {
			if !sitesuggestions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitesuggestions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sitesuggestions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sitesuggestions.FieldDomain, field.TypeString, value)
	}
	if value, ok := _u.mutation.PingURL(); ok {
		_spec.SetField(sitesuggestions.FieldPingURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Categories(); ok {
		_spec.SetField(sitesuggestions.FieldCategories, field.TypeString, value)
	}
	if _u.mutation.CategoriesCleared() {
		_spec.ClearField(sitesuggestions.FieldCategories, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(sitesuggestions.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sitesuggestions.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ResolveReason(); ok {
		_spec.SetField(sitesuggestions.FieldResolveReason, field.TypeString, value)
	}
	if _u.mutation.ResolveReasonCleared() {
		_spec.ClearField(sitesuggestions.FieldResolveReason, field.TypeString)
	}
	if value, ok := _u.mutation.ResolvedAt(); ok {
		_spec.SetField(sitesuggestions.FieldResolvedAt, field.TypeTime, value)
	}
	if _u.mutation.ResolvedAtCleared() {
		_spec.ClearField(sitesuggestions.FieldResolvedAt, field.TypeTime)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitesuggestions.SiteTable,
			Columns: []string{sitesuggestions.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitesuggestions.SiteTable,
			Columns: []string{sitesuggestions.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SiteSuggestions{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitesuggestions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
