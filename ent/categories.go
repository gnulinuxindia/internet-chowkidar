// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
)

// Categories is the model entity for the Categories schema.
type Categories struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoriesQuery when eager-loading is set.
	Edges        CategoriesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CategoriesEdges holds the relations/edges for other nodes in the graph.
type CategoriesEdges struct {
	// Sites holds the value of the sites edge.
	Sites []*Sites `json:"sites,omitempty"`
	// SitesCategories holds the value of the sites_categories edge.
	SitesCategories []*SitesCategories `json:"sites_categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SitesOrErr returns the Sites value or an error if the edge
// was not loaded in eager-loading.
func (e CategoriesEdges) SitesOrErr() ([]*Sites, error) {
	if e.loadedTypes[0] {
		return e.Sites, nil
	}
	return nil, &NotLoadedError{edge: "sites"}
}

// SitesCategoriesOrErr returns the SitesCategories value or an error if the edge
// was not loaded in eager-loading.
func (e CategoriesEdges) SitesCategoriesOrErr() ([]*SitesCategories, error) {
	if e.loadedTypes[1] {
		return e.SitesCategories, nil
	}
	return nil, &NotLoadedError{edge: "sites_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Categories) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case categories.FieldID:
			values[i] = new(sql.NullInt64)
		case categories.FieldName:
			values[i] = new(sql.NullString)
		case categories.FieldCreatedAt, categories.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Categories fields.
func (_m *Categories) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categories.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case categories.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case categories.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case categories.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Categories.
// This includes values selected through modifiers, order, etc.
func (_m *Categories) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySites queries the "sites" edge of the Categories entity.
func (_m *Categories) QuerySites() *SitesQuery {
	return NewCategoriesClient(_m.config).QuerySites(_m)
}

// QuerySitesCategories queries the "sites_categories" edge of the Categories entity.
func (_m *Categories) QuerySitesCategories() *SitesCategoriesQuery {
	return NewCategoriesClient(_m.config).QuerySitesCategories(_m)
}

// Update returns a builder for updating this Categories.
// Note that you need to call Categories.Unwrap() before calling this method if this Categories
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Categories) Update() *CategoriesUpdateOne {
	return NewCategoriesClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Categories entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Categories) Unwrap() *Categories {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Categories is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Categories) String() string {
	var builder strings.Builder
	builder.WriteString("Categories(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CategoriesSlice is a parsable slice of Categories.
type CategoriesSlice []*Categories
