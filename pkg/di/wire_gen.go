// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"database/sql"
	"github.com/gnulinuxindia/internet-chowkidar/api"
	"github.com/gnulinuxindia/internet-chowkidar/api/handler"
	"github.com/gnulinuxindia/internet-chowkidar/ent"
	"github.com/gnulinuxindia/internet-chowkidar/internal/config"
	"github.com/gnulinuxindia/internet-chowkidar/internal/db"
	"github.com/gnulinuxindia/internet-chowkidar/internal/tracing"
	"github.com/gnulinuxindia/internet-chowkidar/pkg/domain/provider"
	"github.com/gnulinuxindia/internet-chowkidar/pkg/domain/repository"
	"github.com/gnulinuxindia/internet-chowkidar/pkg/domain/service"
	"github.com/google/wire"
	"go.opentelemetry.io/otel/sdk/trace"
	"go.uber.org/mock/gomock"
)

// Injectors from wire.go:

// handlers
func InjectHandlers() (*api.Handlers, error) {
	apiDocsHandler := handler.ProvideApiDocsHandler()
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	blocksService := service.ProvideBlocksService(blocksRepository)
	sitesRepository := repository.ProvideSitesRepository(client)
	txHandler := repository.NewTxHandler(client)
	sitesService := service.ProvideSitesService(sitesRepository, blocksRepository, txHandler)
	blocksHandler := handler.ProvideBlocksHandler(blocksService, sitesService)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	categoriesService := service.ProvideCategoriesService(categoriesRepository)
	categoryHandler := handler.ProvideCategoryHandler(categoriesService)
	healthHandler := handler.ProvideHealthHandler()
	ispRepository := repository.ProvideIspRepository(client)
	ispService := service.ProvideIspService(ispRepository, txHandler)
	ispHandler := handler.ProvideIspHandler(ispService)
	reportsHandler := handler.ProvideReportsHandler()
	securityHandler := handler.ProvideSecurityHandler(configConfig)
	sitesHandler := handler.ProvideSitesHandler(sitesService)
	handlers := &api.Handlers{
		ApiDocsHandler:  apiDocsHandler,
		BlocksHandler:   blocksHandler,
		CategoryHandler: categoryHandler,
		HealthHandler:   healthHandler,
		IspHandler:      ispHandler,
		ReportsHandler:  reportsHandler,
		SecurityHandler: securityHandler,
		SitesHandler:    sitesHandler,
	}
	return handlers, nil
}

func InjectSecurityHandler() (handler.SecurityHandler, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	securityHandler := handler.NewSecurityHandler(configConfig)
	return securityHandler, nil
}

func InjectMockHandlers(ctrl *gomock.Controller) (*api.Handlers, error) {
	apiDocsHandler := handler.ProvideApiDocsHandler()
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	blocksService := service.ProvideBlocksService(blocksRepository)
	sitesRepository := repository.ProvideSitesRepository(client)
	txHandler := repository.NewTxHandler(client)
	sitesService := service.ProvideSitesService(sitesRepository, blocksRepository, txHandler)
	blocksHandler := handler.ProvideBlocksHandler(blocksService, sitesService)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	categoriesService := service.ProvideCategoriesService(categoriesRepository)
	categoryHandler := handler.ProvideCategoryHandler(categoriesService)
	healthHandler := handler.ProvideHealthHandler()
	ispRepository := repository.ProvideIspRepository(client)
	ispService := service.ProvideIspService(ispRepository, txHandler)
	ispHandler := handler.ProvideIspHandler(ispService)
	reportsHandler := handler.ProvideReportsHandler()
	securityHandler := handler.ProvideSecurityHandler(configConfig)
	sitesHandler := handler.ProvideSitesHandler(sitesService)
	handlers := &api.Handlers{
		ApiDocsHandler:  apiDocsHandler,
		BlocksHandler:   blocksHandler,
		CategoryHandler: categoryHandler,
		HealthHandler:   healthHandler,
		IspHandler:      ispHandler,
		ReportsHandler:  reportsHandler,
		SecurityHandler: securityHandler,
		SitesHandler:    sitesHandler,
	}
	return handlers, nil
}

// services
func InjectServices() (*di.Services, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	blocksService := service.ProvideBlocksService(blocksRepository)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	categoriesService := service.ProvideCategoriesService(categoriesRepository)
	ispRepository := repository.ProvideIspRepository(client)
	txHandler := repository.NewTxHandler(client)
	ispService := service.ProvideIspService(ispRepository, txHandler)
	sitesRepository := repository.ProvideSitesRepository(client)
	sitesService := service.ProvideSitesService(sitesRepository, blocksRepository, txHandler)
	services := &di.Services{
		BlocksService:     blocksService,
		CategoriesService: categoriesService,
		IspService:        ispService,
		SitesService:      sitesService,
	}
	return services, nil
}

func InjectMockServices(ctrl *gomock.Controller) (*di.Services, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	blocksService := service.ProvideBlocksService(blocksRepository)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	categoriesService := service.ProvideCategoriesService(categoriesRepository)
	ispRepository := repository.ProvideIspRepository(client)
	txHandler := repository.NewTxHandler(client)
	ispService := service.ProvideIspService(ispRepository, txHandler)
	sitesRepository := repository.ProvideSitesRepository(client)
	sitesService := service.ProvideSitesService(sitesRepository, blocksRepository, txHandler)
	services := &di.Services{
		BlocksService:     blocksService,
		CategoriesService: categoriesService,
		IspService:        ispService,
		SitesService:      sitesService,
	}
	return services, nil
}

// repositories
func InjectRepository() (*di.Repositories, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	counterRepository := repository.ProvideCounterRepository(client)
	ispRepository := repository.ProvideIspRepository(client)
	reportsRepository := repository.ProvideReportsRepository(client)
	sitesRepository := repository.ProvideSitesRepository(client)
	repositories := &di.Repositories{
		BlocksRepository:     blocksRepository,
		CategoriesRepository: categoriesRepository,
		CounterRepository:    counterRepository,
		IspRepository:        ispRepository,
		ReportsRepository:    reportsRepository,
		SitesRepository:      sitesRepository,
	}
	return repositories, nil
}

func InjectMockRepository(ctrl *gomock.Controller) (*di.Repositories, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	blocksRepository := repository.ProvideBlocksRepository(client)
	categoriesRepository := repository.ProvideCategoriesRepository(client)
	counterRepository := repository.ProvideCounterRepository(client)
	ispRepository := repository.ProvideIspRepository(client)
	reportsRepository := repository.ProvideReportsRepository(client)
	sitesRepository := repository.ProvideSitesRepository(client)
	repositories := &di.Repositories{
		BlocksRepository:     blocksRepository,
		CategoriesRepository: categoriesRepository,
		CounterRepository:    counterRepository,
		IspRepository:        ispRepository,
		ReportsRepository:    reportsRepository,
		SitesRepository:      sitesRepository,
	}
	return repositories, nil
}

// misc
func InjectDb() (*ent.Client, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InjectMockDb() (*ent.Client, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InjectTracerProvider() (*trace.TracerProvider, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	tracerProvider, err := tracing.ProvideTracerProvider(configConfig)
	if err != nil {
		return nil, err
	}
	return tracerProvider, nil
}

func InjectRawDb() (*sql.DB, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return nil, err
	}
	return sqlDB, nil
}

func InjectConfig() (*config.Config, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InjectTxHandler() (repository.TxHandler, error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return repository.TxHandler{}, err
	}
	sqlDB, err := db.ProvideRawDB(configConfig)
	if err != nil {
		return repository.TxHandler{}, err
	}
	client, err := db.ProvideDB(sqlDB, configConfig)
	if err != nil {
		return repository.TxHandler{}, err
	}
	txHandler := repository.NewTxHandler(client)
	return txHandler, nil
}

// wire.go:

var dbSet = wire.NewSet(db.ProvideDB, db.ProvideRawDB, config.ProvideConfig)

var mockDbSet = wire.NewSet(db.ProvideDB, db.ProvideRawDB, config.ProvideConfig)

var concreteSet = wire.NewSet(api.HandlerSet, di.RepositorySet, di.ServiceSet, repository.NewTxHandler)

var mockSet = wire.NewSet(api.MockHandlerSet, di.MockRepositorySet, di.MockServiceSet, repository.NewTxHandler)

var tracingSet = wire.NewSet(config.ProvideConfig, tracing.ProvideTracerProvider)
